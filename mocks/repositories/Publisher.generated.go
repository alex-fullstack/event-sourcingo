// Code generated by mockery v2.52.3. DO NOT EDIT.

package repositories

import (
	context "context"

	events "github.com/alex-fullstack/event-sourcingo/domain/events"
	mock "github.com/stretchr/testify/mock"
)

// MockPublisher is an autogenerated mock type for the Publisher type
type MockPublisher[T interface{}] struct {
	mock.Mock
}

type MockPublisher_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockPublisher[T]) EXPECT() *MockPublisher_Expecter[T] {
	return &MockPublisher_Expecter[T]{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *MockPublisher[T]) Publish(_a0 context.Context, _a1 []events.IntegrationEvent[T]) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []events.IntegrationEvent[T]) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockPublisher_Publish_Call[T interface{}] struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []events.IntegrationEvent[T]
func (_e *MockPublisher_Expecter[T]) Publish(_a0 interface{}, _a1 interface{}) *MockPublisher_Publish_Call[T] {
	return &MockPublisher_Publish_Call[T]{Call: _e.mock.On("Publish", _a0, _a1)}
}

func (_c *MockPublisher_Publish_Call[T]) Run(run func(_a0 context.Context, _a1 []events.IntegrationEvent[T])) *MockPublisher_Publish_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]events.IntegrationEvent[T]))
	})
	return _c
}

func (_c *MockPublisher_Publish_Call[T]) Return(_a0 error) *MockPublisher_Publish_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPublisher_Publish_Call[T]) RunAndReturn(run func(context.Context, []events.IntegrationEvent[T]) error) *MockPublisher_Publish_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockPublisher creates a new instance of MockPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublisher[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublisher[T] {
	mock := &MockPublisher[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
