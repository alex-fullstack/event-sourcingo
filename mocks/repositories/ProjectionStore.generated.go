// Code generated by mockery v2.52.3. DO NOT EDIT.

package repositories

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProjectionStore is an autogenerated mock type for the ProjectionStore type
type MockProjectionStore[T interface{}] struct {
	mock.Mock
}

type MockProjectionStore_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockProjectionStore[T]) EXPECT() *MockProjectionStore_Expecter[T] {
	return &MockProjectionStore_Expecter[T]{mock: &_m.Mock}
}

// Save provides a mock function with given fields: ctx, projection
func (_m *MockProjectionStore[T]) Save(ctx context.Context, projection T) error {
	ret := _m.Called(ctx, projection)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, T) error); ok {
		r0 = rf(ctx, projection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProjectionStore_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockProjectionStore_Save_Call[T interface{}] struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - projection T
func (_e *MockProjectionStore_Expecter[T]) Save(ctx interface{}, projection interface{}) *MockProjectionStore_Save_Call[T] {
	return &MockProjectionStore_Save_Call[T]{Call: _e.mock.On("Save", ctx, projection)}
}

func (_c *MockProjectionStore_Save_Call[T]) Run(run func(ctx context.Context, projection T)) *MockProjectionStore_Save_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(T))
	})
	return _c
}

func (_c *MockProjectionStore_Save_Call[T]) Return(_a0 error) *MockProjectionStore_Save_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectionStore_Save_Call[T]) RunAndReturn(run func(context.Context, T) error) *MockProjectionStore_Save_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectionStore creates a new instance of MockProjectionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectionStore[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectionStore[T] {
	mock := &MockProjectionStore[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
