// Code generated by mockery v2.52.3. DO NOT EDIT.

package repositories

import (
	context "context"

	entities "github.com/alex-fullstack/event-sourcingo/domain/entities"
	events "github.com/alex-fullstack/event-sourcingo/domain/events"

	mock "github.com/stretchr/testify/mock"

	subscriptions "github.com/alex-fullstack/event-sourcingo/domain/subscriptions"

	uuid "github.com/google/uuid"
)

// MockEventStore is an autogenerated mock type for the EventStore type
type MockEventStore struct {
	mock.Mock
}

type MockEventStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventStore) EXPECT() *MockEventStore_Expecter {
	return &MockEventStore_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: _a0
func (_m *MockEventStore) Begin(_a0 context.Context) (interface{}, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (interface{}, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventStore_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockEventStore_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockEventStore_Expecter) Begin(_a0 interface{}) *MockEventStore_Begin_Call {
	return &MockEventStore_Begin_Call{Call: _e.mock.On("Begin", _a0)}
}

func (_c *MockEventStore_Begin_Call) Run(run func(_a0 context.Context)) *MockEventStore_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEventStore_Begin_Call) Return(executor interface{}, err error) *MockEventStore_Begin_Call {
	_c.Call.Return(executor, err)
	return _c
}

func (_c *MockEventStore_Begin_Call) RunAndReturn(run func(context.Context) (interface{}, error)) *MockEventStore_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx, executor
func (_m *MockEventStore) Commit(ctx context.Context, executor interface{}) error {
	ret := _m.Called(ctx, executor)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventStore_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockEventStore_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
//   - executor interface{}
func (_e *MockEventStore_Expecter) Commit(ctx interface{}, executor interface{}) *MockEventStore_Commit_Call {
	return &MockEventStore_Commit_Call{Call: _e.mock.On("Commit", ctx, executor)}
}

func (_c *MockEventStore_Commit_Call) Run(run func(ctx context.Context, executor interface{})) *MockEventStore_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockEventStore_Commit_Call) Return(_a0 error) *MockEventStore_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventStore_Commit_Call) RunAndReturn(run func(context.Context, interface{}) error) *MockEventStore_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// GetAggregateEvents provides a mock function with given fields: ctx, id, executor
func (_m *MockEventStore) GetAggregateEvents(ctx context.Context, id uuid.UUID, executor interface{}) ([]events.Event, error) {
	ret := _m.Called(ctx, id, executor)

	if len(ret) == 0 {
		panic("no return value specified for GetAggregateEvents")
	}

	var r0 []events.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, interface{}) ([]events.Event, error)); ok {
		return rf(ctx, id, executor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, interface{}) []events.Event); ok {
		r0 = rf(ctx, id, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, interface{}) error); ok {
		r1 = rf(ctx, id, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventStore_GetAggregateEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAggregateEvents'
type MockEventStore_GetAggregateEvents_Call struct {
	*mock.Call
}

// GetAggregateEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - executor interface{}
func (_e *MockEventStore_Expecter) GetAggregateEvents(ctx interface{}, id interface{}, executor interface{}) *MockEventStore_GetAggregateEvents_Call {
	return &MockEventStore_GetAggregateEvents_Call{Call: _e.mock.On("GetAggregateEvents", ctx, id, executor)}
}

func (_c *MockEventStore_GetAggregateEvents_Call) Run(run func(ctx context.Context, id uuid.UUID, executor interface{})) *MockEventStore_GetAggregateEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(interface{}))
	})
	return _c
}

func (_c *MockEventStore_GetAggregateEvents_Call) Return(_a0 []events.Event, _a1 error) *MockEventStore_GetAggregateEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventStore_GetAggregateEvents_Call) RunAndReturn(run func(context.Context, uuid.UUID, interface{}) ([]events.Event, error)) *MockEventStore_GetAggregateEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewEventsAndHistory provides a mock function with given fields: ctx, id, firstSequenceId, lastSequenceId, executor
func (_m *MockEventStore) GetNewEventsAndHistory(ctx context.Context, id uuid.UUID, firstSequenceId int64, lastSequenceId int64, executor interface{}) ([]events.Event, []events.Event, error) {
	ret := _m.Called(ctx, id, firstSequenceId, lastSequenceId, executor)

	if len(ret) == 0 {
		panic("no return value specified for GetNewEventsAndHistory")
	}

	var r0 []events.Event
	var r1 []events.Event
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int64, int64, interface{}) ([]events.Event, []events.Event, error)); ok {
		return rf(ctx, id, firstSequenceId, lastSequenceId, executor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int64, int64, interface{}) []events.Event); ok {
		r0 = rf(ctx, id, firstSequenceId, lastSequenceId, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int64, int64, interface{}) []events.Event); ok {
		r1 = rf(ctx, id, firstSequenceId, lastSequenceId, executor)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]events.Event)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, int64, int64, interface{}) error); ok {
		r2 = rf(ctx, id, firstSequenceId, lastSequenceId, executor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockEventStore_GetNewEventsAndHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewEventsAndHistory'
type MockEventStore_GetNewEventsAndHistory_Call struct {
	*mock.Call
}

// GetNewEventsAndHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - firstSequenceId int64
//   - lastSequenceId int64
//   - executor interface{}
func (_e *MockEventStore_Expecter) GetNewEventsAndHistory(ctx interface{}, id interface{}, firstSequenceId interface{}, lastSequenceId interface{}, executor interface{}) *MockEventStore_GetNewEventsAndHistory_Call {
	return &MockEventStore_GetNewEventsAndHistory_Call{Call: _e.mock.On("GetNewEventsAndHistory", ctx, id, firstSequenceId, lastSequenceId, executor)}
}

func (_c *MockEventStore_GetNewEventsAndHistory_Call) Run(run func(ctx context.Context, id uuid.UUID, firstSequenceId int64, lastSequenceId int64, executor interface{})) *MockEventStore_GetNewEventsAndHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int64), args[3].(int64), args[4].(interface{}))
	})
	return _c
}

func (_c *MockEventStore_GetNewEventsAndHistory_Call) Return(_a0 []events.Event, _a1 []events.Event, _a2 error) *MockEventStore_GetNewEventsAndHistory_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockEventStore_GetNewEventsAndHistory_Call) RunAndReturn(run func(context.Context, uuid.UUID, int64, int64, interface{}) ([]events.Event, []events.Event, error)) *MockEventStore_GetNewEventsAndHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscription provides a mock function with given fields: ctx, executor
func (_m *MockEventStore) GetSubscription(ctx context.Context, executor interface{}) (*subscriptions.Subscription, error) {
	ret := _m.Called(ctx, executor)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 *subscriptions.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*subscriptions.Subscription, error)); ok {
		return rf(ctx, executor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *subscriptions.Subscription); ok {
		r0 = rf(ctx, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subscriptions.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventStore_GetSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscription'
type MockEventStore_GetSubscription_Call struct {
	*mock.Call
}

// GetSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - executor interface{}
func (_e *MockEventStore_Expecter) GetSubscription(ctx interface{}, executor interface{}) *MockEventStore_GetSubscription_Call {
	return &MockEventStore_GetSubscription_Call{Call: _e.mock.On("GetSubscription", ctx, executor)}
}

func (_c *MockEventStore_GetSubscription_Call) Run(run func(ctx context.Context, executor interface{})) *MockEventStore_GetSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockEventStore_GetSubscription_Call) Return(_a0 *subscriptions.Subscription, _a1 error) *MockEventStore_GetSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventStore_GetSubscription_Call) RunAndReturn(run func(context.Context, interface{}) (*subscriptions.Subscription, error)) *MockEventStore_GetSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx, executor
func (_m *MockEventStore) Rollback(ctx context.Context, executor interface{}) error {
	ret := _m.Called(ctx, executor)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventStore_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockEventStore_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
//   - executor interface{}
func (_e *MockEventStore_Expecter) Rollback(ctx interface{}, executor interface{}) *MockEventStore_Rollback_Call {
	return &MockEventStore_Rollback_Call{Call: _e.mock.On("Rollback", ctx, executor)}
}

func (_c *MockEventStore_Rollback_Call) Run(run func(ctx context.Context, executor interface{})) *MockEventStore_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockEventStore_Rollback_Call) Return(_a0 error) *MockEventStore_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventStore_Rollback_Call) RunAndReturn(run func(context.Context, interface{}) error) *MockEventStore_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrCreateAggregate provides a mock function with given fields: ctx, transactionId, reader, executor
func (_m *MockEventStore) UpdateOrCreateAggregate(ctx context.Context, transactionId uuid.UUID, reader entities.AggregateReader, executor interface{}) error {
	ret := _m.Called(ctx, transactionId, reader, executor)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrCreateAggregate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entities.AggregateReader, interface{}) error); ok {
		r0 = rf(ctx, transactionId, reader, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventStore_UpdateOrCreateAggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrCreateAggregate'
type MockEventStore_UpdateOrCreateAggregate_Call struct {
	*mock.Call
}

// UpdateOrCreateAggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionId uuid.UUID
//   - reader entities.AggregateReader
//   - executor interface{}
func (_e *MockEventStore_Expecter) UpdateOrCreateAggregate(ctx interface{}, transactionId interface{}, reader interface{}, executor interface{}) *MockEventStore_UpdateOrCreateAggregate_Call {
	return &MockEventStore_UpdateOrCreateAggregate_Call{Call: _e.mock.On("UpdateOrCreateAggregate", ctx, transactionId, reader, executor)}
}

func (_c *MockEventStore_UpdateOrCreateAggregate_Call) Run(run func(ctx context.Context, transactionId uuid.UUID, reader entities.AggregateReader, executor interface{})) *MockEventStore_UpdateOrCreateAggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entities.AggregateReader), args[3].(interface{}))
	})
	return _c
}

func (_c *MockEventStore_UpdateOrCreateAggregate_Call) Return(err error) *MockEventStore_UpdateOrCreateAggregate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventStore_UpdateOrCreateAggregate_Call) RunAndReturn(run func(context.Context, uuid.UUID, entities.AggregateReader, interface{}) error) *MockEventStore_UpdateOrCreateAggregate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubscription provides a mock function with given fields: ctx, sub, executor
func (_m *MockEventStore) UpdateSubscription(ctx context.Context, sub *subscriptions.Subscription, executor interface{}) error {
	ret := _m.Called(ctx, sub, executor)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subscriptions.Subscription, interface{}) error); ok {
		r0 = rf(ctx, sub, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventStore_UpdateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscription'
type MockEventStore_UpdateSubscription_Call struct {
	*mock.Call
}

// UpdateSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - sub *subscriptions.Subscription
//   - executor interface{}
func (_e *MockEventStore_Expecter) UpdateSubscription(ctx interface{}, sub interface{}, executor interface{}) *MockEventStore_UpdateSubscription_Call {
	return &MockEventStore_UpdateSubscription_Call{Call: _e.mock.On("UpdateSubscription", ctx, sub, executor)}
}

func (_c *MockEventStore_UpdateSubscription_Call) Run(run func(ctx context.Context, sub *subscriptions.Subscription, executor interface{})) *MockEventStore_UpdateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*subscriptions.Subscription), args[2].(interface{}))
	})
	return _c
}

func (_c *MockEventStore_UpdateSubscription_Call) Return(_a0 error) *MockEventStore_UpdateSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventStore_UpdateSubscription_Call) RunAndReturn(run func(context.Context, *subscriptions.Subscription, interface{}) error) *MockEventStore_UpdateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventStore creates a new instance of MockEventStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventStore {
	mock := &MockEventStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
