// Code generated by mockery v2.52.3. DO NOT EDIT.

package repositories

import (
	context "context"

	entities "github.com/alex-fullstack/event-sourcingo/domain/entities"
	events "github.com/alex-fullstack/event-sourcingo/domain/events"

	mock "github.com/stretchr/testify/mock"

	subscriptions "github.com/alex-fullstack/event-sourcingo/domain/subscriptions"

	uuid "github.com/google/uuid"
)

// MockEventStore is an autogenerated mock type for the EventStore type
type MockEventStore[T interface{}, S interface{}, E interface{}] struct {
	mock.Mock
}

type MockEventStore_Expecter[T interface{}, S interface{}, E interface{}] struct {
	mock *mock.Mock
}

func (_m *MockEventStore[T, S, E]) EXPECT() *MockEventStore_Expecter[T, S, E] {
	return &MockEventStore_Expecter[T, S, E]{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: _a0
func (_m *MockEventStore[T, S, E]) Begin(_a0 context.Context) (E, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 E
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (E, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) E); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(E)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventStore_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockEventStore_Begin_Call[T interface{}, S interface{}, E interface{}] struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockEventStore_Expecter[T, S, E]) Begin(_a0 interface{}) *MockEventStore_Begin_Call[T, S, E] {
	return &MockEventStore_Begin_Call[T, S, E]{Call: _e.mock.On("Begin", _a0)}
}

func (_c *MockEventStore_Begin_Call[T, S, E]) Run(run func(_a0 context.Context)) *MockEventStore_Begin_Call[T, S, E] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEventStore_Begin_Call[T, S, E]) Return(executor E, err error) *MockEventStore_Begin_Call[T, S, E] {
	_c.Call.Return(executor, err)
	return _c
}

func (_c *MockEventStore_Begin_Call[T, S, E]) RunAndReturn(run func(context.Context) (E, error)) *MockEventStore_Begin_Call[T, S, E] {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx, executor
func (_m *MockEventStore[T, S, E]) Commit(ctx context.Context, executor E) error {
	ret := _m.Called(ctx, executor)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, E) error); ok {
		r0 = rf(ctx, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventStore_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockEventStore_Commit_Call[T interface{}, S interface{}, E interface{}] struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
//   - executor E
func (_e *MockEventStore_Expecter[T, S, E]) Commit(ctx interface{}, executor interface{}) *MockEventStore_Commit_Call[T, S, E] {
	return &MockEventStore_Commit_Call[T, S, E]{Call: _e.mock.On("Commit", ctx, executor)}
}

func (_c *MockEventStore_Commit_Call[T, S, E]) Run(run func(ctx context.Context, executor E)) *MockEventStore_Commit_Call[T, S, E] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(E))
	})
	return _c
}

func (_c *MockEventStore_Commit_Call[T, S, E]) Return(_a0 error) *MockEventStore_Commit_Call[T, S, E] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventStore_Commit_Call[T, S, E]) RunAndReturn(run func(context.Context, E) error) *MockEventStore_Commit_Call[T, S, E] {
	_c.Call.Return(run)
	return _c
}

// GetHistory provides a mock function with given fields: ctx, id, fromVersion, executor
func (_m *MockEventStore[T, S, E]) GetHistory(ctx context.Context, id uuid.UUID, fromVersion int, executor E) ([]events.Event[T], error) {
	ret := _m.Called(ctx, id, fromVersion, executor)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 []events.Event[T]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, E) ([]events.Event[T], error)); ok {
		return rf(ctx, id, fromVersion, executor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, E) []events.Event[T]); ok {
		r0 = rf(ctx, id, fromVersion, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Event[T])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, E) error); ok {
		r1 = rf(ctx, id, fromVersion, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventStore_GetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistory'
type MockEventStore_GetHistory_Call[T interface{}, S interface{}, E interface{}] struct {
	*mock.Call
}

// GetHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - fromVersion int
//   - executor E
func (_e *MockEventStore_Expecter[T, S, E]) GetHistory(ctx interface{}, id interface{}, fromVersion interface{}, executor interface{}) *MockEventStore_GetHistory_Call[T, S, E] {
	return &MockEventStore_GetHistory_Call[T, S, E]{Call: _e.mock.On("GetHistory", ctx, id, fromVersion, executor)}
}

func (_c *MockEventStore_GetHistory_Call[T, S, E]) Run(run func(ctx context.Context, id uuid.UUID, fromVersion int, executor E)) *MockEventStore_GetHistory_Call[T, S, E] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int), args[3].(E))
	})
	return _c
}

func (_c *MockEventStore_GetHistory_Call[T, S, E]) Return(_a0 []events.Event[T], _a1 error) *MockEventStore_GetHistory_Call[T, S, E] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventStore_GetHistory_Call[T, S, E]) RunAndReturn(run func(context.Context, uuid.UUID, int, E) ([]events.Event[T], error)) *MockEventStore_GetHistory_Call[T, S, E] {
	_c.Call.Return(run)
	return _c
}

// GetLastSnapshot provides a mock function with given fields: ctx, id, executor
func (_m *MockEventStore[T, S, E]) GetLastSnapshot(ctx context.Context, id uuid.UUID, executor E) (int, S, error) {
	ret := _m.Called(ctx, id, executor)

	if len(ret) == 0 {
		panic("no return value specified for GetLastSnapshot")
	}

	var r0 int
	var r1 S
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, E) (int, S, error)); ok {
		return rf(ctx, id, executor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, E) int); ok {
		r0 = rf(ctx, id, executor)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, E) S); ok {
		r1 = rf(ctx, id, executor)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(S)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, E) error); ok {
		r2 = rf(ctx, id, executor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockEventStore_GetLastSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastSnapshot'
type MockEventStore_GetLastSnapshot_Call[T interface{}, S interface{}, E interface{}] struct {
	*mock.Call
}

// GetLastSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - executor E
func (_e *MockEventStore_Expecter[T, S, E]) GetLastSnapshot(ctx interface{}, id interface{}, executor interface{}) *MockEventStore_GetLastSnapshot_Call[T, S, E] {
	return &MockEventStore_GetLastSnapshot_Call[T, S, E]{Call: _e.mock.On("GetLastSnapshot", ctx, id, executor)}
}

func (_c *MockEventStore_GetLastSnapshot_Call[T, S, E]) Run(run func(ctx context.Context, id uuid.UUID, executor E)) *MockEventStore_GetLastSnapshot_Call[T, S, E] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(E))
	})
	return _c
}

func (_c *MockEventStore_GetLastSnapshot_Call[T, S, E]) Return(_a0 int, _a1 S, _a2 error) *MockEventStore_GetLastSnapshot_Call[T, S, E] {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockEventStore_GetLastSnapshot_Call[T, S, E]) RunAndReturn(run func(context.Context, uuid.UUID, E) (int, S, error)) *MockEventStore_GetLastSnapshot_Call[T, S, E] {
	_c.Call.Return(run)
	return _c
}

// GetNewEventsAndHistory provides a mock function with given fields: ctx, id, firstSequenceID, lastSequenceID, executor
func (_m *MockEventStore[T, S, E]) GetNewEventsAndHistory(ctx context.Context, id uuid.UUID, firstSequenceID int64, lastSequenceID int64, executor E) ([]events.Event[T], []events.Event[T], error) {
	ret := _m.Called(ctx, id, firstSequenceID, lastSequenceID, executor)

	if len(ret) == 0 {
		panic("no return value specified for GetNewEventsAndHistory")
	}

	var r0 []events.Event[T]
	var r1 []events.Event[T]
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int64, int64, E) ([]events.Event[T], []events.Event[T], error)); ok {
		return rf(ctx, id, firstSequenceID, lastSequenceID, executor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int64, int64, E) []events.Event[T]); ok {
		r0 = rf(ctx, id, firstSequenceID, lastSequenceID, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Event[T])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int64, int64, E) []events.Event[T]); ok {
		r1 = rf(ctx, id, firstSequenceID, lastSequenceID, executor)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]events.Event[T])
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, int64, int64, E) error); ok {
		r2 = rf(ctx, id, firstSequenceID, lastSequenceID, executor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockEventStore_GetNewEventsAndHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewEventsAndHistory'
type MockEventStore_GetNewEventsAndHistory_Call[T interface{}, S interface{}, E interface{}] struct {
	*mock.Call
}

// GetNewEventsAndHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - firstSequenceID int64
//   - lastSequenceID int64
//   - executor E
func (_e *MockEventStore_Expecter[T, S, E]) GetNewEventsAndHistory(ctx interface{}, id interface{}, firstSequenceID interface{}, lastSequenceID interface{}, executor interface{}) *MockEventStore_GetNewEventsAndHistory_Call[T, S, E] {
	return &MockEventStore_GetNewEventsAndHistory_Call[T, S, E]{Call: _e.mock.On("GetNewEventsAndHistory", ctx, id, firstSequenceID, lastSequenceID, executor)}
}

func (_c *MockEventStore_GetNewEventsAndHistory_Call[T, S, E]) Run(run func(ctx context.Context, id uuid.UUID, firstSequenceID int64, lastSequenceID int64, executor E)) *MockEventStore_GetNewEventsAndHistory_Call[T, S, E] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int64), args[3].(int64), args[4].(E))
	})
	return _c
}

func (_c *MockEventStore_GetNewEventsAndHistory_Call[T, S, E]) Return(_a0 []events.Event[T], _a1 []events.Event[T], _a2 error) *MockEventStore_GetNewEventsAndHistory_Call[T, S, E] {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockEventStore_GetNewEventsAndHistory_Call[T, S, E]) RunAndReturn(run func(context.Context, uuid.UUID, int64, int64, E) ([]events.Event[T], []events.Event[T], error)) *MockEventStore_GetNewEventsAndHistory_Call[T, S, E] {
	_c.Call.Return(run)
	return _c
}

// GetSubscription provides a mock function with given fields: ctx, executor
func (_m *MockEventStore[T, S, E]) GetSubscription(ctx context.Context, executor E) (*subscriptions.Subscription, error) {
	ret := _m.Called(ctx, executor)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 *subscriptions.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, E) (*subscriptions.Subscription, error)); ok {
		return rf(ctx, executor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, E) *subscriptions.Subscription); ok {
		r0 = rf(ctx, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subscriptions.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, E) error); ok {
		r1 = rf(ctx, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventStore_GetSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscription'
type MockEventStore_GetSubscription_Call[T interface{}, S interface{}, E interface{}] struct {
	*mock.Call
}

// GetSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - executor E
func (_e *MockEventStore_Expecter[T, S, E]) GetSubscription(ctx interface{}, executor interface{}) *MockEventStore_GetSubscription_Call[T, S, E] {
	return &MockEventStore_GetSubscription_Call[T, S, E]{Call: _e.mock.On("GetSubscription", ctx, executor)}
}

func (_c *MockEventStore_GetSubscription_Call[T, S, E]) Run(run func(ctx context.Context, executor E)) *MockEventStore_GetSubscription_Call[T, S, E] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(E))
	})
	return _c
}

func (_c *MockEventStore_GetSubscription_Call[T, S, E]) Return(_a0 *subscriptions.Subscription, _a1 error) *MockEventStore_GetSubscription_Call[T, S, E] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventStore_GetSubscription_Call[T, S, E]) RunAndReturn(run func(context.Context, E) (*subscriptions.Subscription, error)) *MockEventStore_GetSubscription_Call[T, S, E] {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx, executor
func (_m *MockEventStore[T, S, E]) Rollback(ctx context.Context, executor E) error {
	ret := _m.Called(ctx, executor)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, E) error); ok {
		r0 = rf(ctx, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventStore_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockEventStore_Rollback_Call[T interface{}, S interface{}, E interface{}] struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
//   - executor E
func (_e *MockEventStore_Expecter[T, S, E]) Rollback(ctx interface{}, executor interface{}) *MockEventStore_Rollback_Call[T, S, E] {
	return &MockEventStore_Rollback_Call[T, S, E]{Call: _e.mock.On("Rollback", ctx, executor)}
}

func (_c *MockEventStore_Rollback_Call[T, S, E]) Run(run func(ctx context.Context, executor E)) *MockEventStore_Rollback_Call[T, S, E] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(E))
	})
	return _c
}

func (_c *MockEventStore_Rollback_Call[T, S, E]) Return(_a0 error) *MockEventStore_Rollback_Call[T, S, E] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventStore_Rollback_Call[T, S, E]) RunAndReturn(run func(context.Context, E) error) *MockEventStore_Rollback_Call[T, S, E] {
	_c.Call.Return(run)
	return _c
}

// UpdateOrCreateAggregate provides a mock function with given fields: ctx, transactionID, reader, snapshot, executor
func (_m *MockEventStore[T, S, E]) UpdateOrCreateAggregate(ctx context.Context, transactionID uuid.UUID, reader entities.AggregateReader[T], snapshot S, executor E) (int, error) {
	ret := _m.Called(ctx, transactionID, reader, snapshot, executor)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrCreateAggregate")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entities.AggregateReader[T], S, E) (int, error)); ok {
		return rf(ctx, transactionID, reader, snapshot, executor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, entities.AggregateReader[T], S, E) int); ok {
		r0 = rf(ctx, transactionID, reader, snapshot, executor)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, entities.AggregateReader[T], S, E) error); ok {
		r1 = rf(ctx, transactionID, reader, snapshot, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventStore_UpdateOrCreateAggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrCreateAggregate'
type MockEventStore_UpdateOrCreateAggregate_Call[T interface{}, S interface{}, E interface{}] struct {
	*mock.Call
}

// UpdateOrCreateAggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionID uuid.UUID
//   - reader entities.AggregateReader[T]
//   - snapshot S
//   - executor E
func (_e *MockEventStore_Expecter[T, S, E]) UpdateOrCreateAggregate(ctx interface{}, transactionID interface{}, reader interface{}, snapshot interface{}, executor interface{}) *MockEventStore_UpdateOrCreateAggregate_Call[T, S, E] {
	return &MockEventStore_UpdateOrCreateAggregate_Call[T, S, E]{Call: _e.mock.On("UpdateOrCreateAggregate", ctx, transactionID, reader, snapshot, executor)}
}

func (_c *MockEventStore_UpdateOrCreateAggregate_Call[T, S, E]) Run(run func(ctx context.Context, transactionID uuid.UUID, reader entities.AggregateReader[T], snapshot S, executor E)) *MockEventStore_UpdateOrCreateAggregate_Call[T, S, E] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(entities.AggregateReader[T]), args[3].(S), args[4].(E))
	})
	return _c
}

func (_c *MockEventStore_UpdateOrCreateAggregate_Call[T, S, E]) Return(snapshotCount int, err error) *MockEventStore_UpdateOrCreateAggregate_Call[T, S, E] {
	_c.Call.Return(snapshotCount, err)
	return _c
}

func (_c *MockEventStore_UpdateOrCreateAggregate_Call[T, S, E]) RunAndReturn(run func(context.Context, uuid.UUID, entities.AggregateReader[T], S, E) (int, error)) *MockEventStore_UpdateOrCreateAggregate_Call[T, S, E] {
	_c.Call.Return(run)
	return _c
}

// UpdateSubscription provides a mock function with given fields: ctx, sub, executor
func (_m *MockEventStore[T, S, E]) UpdateSubscription(ctx context.Context, sub *subscriptions.Subscription, executor E) error {
	ret := _m.Called(ctx, sub, executor)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *subscriptions.Subscription, E) error); ok {
		r0 = rf(ctx, sub, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventStore_UpdateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscription'
type MockEventStore_UpdateSubscription_Call[T interface{}, S interface{}, E interface{}] struct {
	*mock.Call
}

// UpdateSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - sub *subscriptions.Subscription
//   - executor E
func (_e *MockEventStore_Expecter[T, S, E]) UpdateSubscription(ctx interface{}, sub interface{}, executor interface{}) *MockEventStore_UpdateSubscription_Call[T, S, E] {
	return &MockEventStore_UpdateSubscription_Call[T, S, E]{Call: _e.mock.On("UpdateSubscription", ctx, sub, executor)}
}

func (_c *MockEventStore_UpdateSubscription_Call[T, S, E]) Run(run func(ctx context.Context, sub *subscriptions.Subscription, executor E)) *MockEventStore_UpdateSubscription_Call[T, S, E] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*subscriptions.Subscription), args[2].(E))
	})
	return _c
}

func (_c *MockEventStore_UpdateSubscription_Call[T, S, E]) Return(_a0 error) *MockEventStore_UpdateSubscription_Call[T, S, E] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventStore_UpdateSubscription_Call[T, S, E]) RunAndReturn(run func(context.Context, *subscriptions.Subscription, E) error) *MockEventStore_UpdateSubscription_Call[T, S, E] {
	_c.Call.Return(run)
	return _c
}

// NewMockEventStore creates a new instance of MockEventStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventStore[T interface{}, S interface{}, E interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventStore[T, S, E] {
	mock := &MockEventStore[T, S, E]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
