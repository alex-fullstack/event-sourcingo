// Code generated by mockery v2.52.3. DO NOT EDIT.

package services

import (
	context "context"

	entities "github.com/alex-fullstack/event-sourcingo/domain/entities"
	events "github.com/alex-fullstack/event-sourcingo/domain/events"

	mock "github.com/stretchr/testify/mock"
)

// MockEventHandler is an autogenerated mock type for the EventHandler type
type MockEventHandler[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	mock.Mock
}

type MockEventHandler_Expecter[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	mock *mock.Mock
}

func (_m *MockEventHandler[T, S, P, K]) EXPECT() *MockEventHandler_Expecter[T, S, P, K] {
	return &MockEventHandler_Expecter[T, S, P, K]{mock: &_m.Mock}
}

// HandleEvents provides a mock function with given fields: ctx, provider, _a2
func (_m *MockEventHandler[T, S, P, K]) HandleEvents(ctx context.Context, provider entities.AggregateProvider[T, S, P, K], _a2 []events.Event[T]) error {
	ret := _m.Called(ctx, provider, _a2)

	if len(ret) == 0 {
		panic("no return value specified for HandleEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.AggregateProvider[T, S, P, K], []events.Event[T]) error); ok {
		r0 = rf(ctx, provider, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventHandler_HandleEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleEvents'
type MockEventHandler_HandleEvents_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// HandleEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - provider entities.AggregateProvider[T,S,P,K]
//   - _a2 []events.Event[T]
func (_e *MockEventHandler_Expecter[T, S, P, K]) HandleEvents(ctx interface{}, provider interface{}, _a2 interface{}) *MockEventHandler_HandleEvents_Call[T, S, P, K] {
	return &MockEventHandler_HandleEvents_Call[T, S, P, K]{Call: _e.mock.On("HandleEvents", ctx, provider, _a2)}
}

func (_c *MockEventHandler_HandleEvents_Call[T, S, P, K]) Run(run func(ctx context.Context, provider entities.AggregateProvider[T, S, P, K], _a2 []events.Event[T])) *MockEventHandler_HandleEvents_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.AggregateProvider[T, S, P, K]), args[2].([]events.Event[T]))
	})
	return _c
}

func (_c *MockEventHandler_HandleEvents_Call[T, S, P, K]) Return(_a0 error) *MockEventHandler_HandleEvents_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventHandler_HandleEvents_Call[T, S, P, K]) RunAndReturn(run func(context.Context, entities.AggregateProvider[T, S, P, K], []events.Event[T]) error) *MockEventHandler_HandleEvents_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// NewMockEventHandler creates a new instance of MockEventHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventHandler[T interface{}, S interface{}, P interface{}, K interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventHandler[T, S, P, K] {
	mock := &MockEventHandler[T, S, P, K]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
