// Code generated by mockery v2.52.3. DO NOT EDIT.

package services

import (
	context "context"

	entities "github.com/alex-fullstack/event-sourcingo/domain/entities"
	mock "github.com/stretchr/testify/mock"

	transactions "github.com/alex-fullstack/event-sourcingo/domain/transactions"

	uuid "github.com/google/uuid"
)

// MockTransactionHandler is an autogenerated mock type for the TransactionHandler type
type MockTransactionHandler[T interface{}, S interface{}, P interface{}, K interface{}, E interface{}] struct {
	mock.Mock
}

type MockTransactionHandler_Expecter[T interface{}, S interface{}, P interface{}, K interface{}, E interface{}] struct {
	mock *mock.Mock
}

func (_m *MockTransactionHandler[T, S, P, K, E]) EXPECT() *MockTransactionHandler_Expecter[T, S, P, K, E] {
	return &MockTransactionHandler_Expecter[T, S, P, K, E]{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, transaction, providerFn
func (_m *MockTransactionHandler[T, S, P, K, E]) Handle(ctx context.Context, transaction *transactions.Transaction, providerFn func(uuid.UUID) entities.AggregateProvider[T, S, P, K]) error {
	ret := _m.Called(ctx, transaction, providerFn)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *transactions.Transaction, func(uuid.UUID) entities.AggregateProvider[T, S, P, K]) error); ok {
		r0 = rf(ctx, transaction, providerFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockTransactionHandler_Handle_Call[T interface{}, S interface{}, P interface{}, K interface{}, E interface{}] struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *transactions.Transaction
//   - providerFn func(uuid.UUID) entities.AggregateProvider[T,S,P,K]
func (_e *MockTransactionHandler_Expecter[T, S, P, K, E]) Handle(ctx interface{}, transaction interface{}, providerFn interface{}) *MockTransactionHandler_Handle_Call[T, S, P, K, E] {
	return &MockTransactionHandler_Handle_Call[T, S, P, K, E]{Call: _e.mock.On("Handle", ctx, transaction, providerFn)}
}

func (_c *MockTransactionHandler_Handle_Call[T, S, P, K, E]) Run(run func(ctx context.Context, transaction *transactions.Transaction, providerFn func(uuid.UUID) entities.AggregateProvider[T, S, P, K])) *MockTransactionHandler_Handle_Call[T, S, P, K, E] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*transactions.Transaction), args[2].(func(uuid.UUID) entities.AggregateProvider[T, S, P, K]))
	})
	return _c
}

func (_c *MockTransactionHandler_Handle_Call[T, S, P, K, E]) Return(_a0 error) *MockTransactionHandler_Handle_Call[T, S, P, K, E] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionHandler_Handle_Call[T, S, P, K, E]) RunAndReturn(run func(context.Context, *transactions.Transaction, func(uuid.UUID) entities.AggregateProvider[T, S, P, K]) error) *MockTransactionHandler_Handle_Call[T, S, P, K, E] {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionHandler creates a new instance of MockTransactionHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionHandler[T interface{}, S interface{}, P interface{}, K interface{}, E interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionHandler[T, S, P, K, E] {
	mock := &MockTransactionHandler[T, S, P, K, E]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
