// Code generated by mockery v2.52.3. DO NOT EDIT.

package entities

import (
	events "github.com/alex-fullstack/event-sourcingo/domain/events"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockAggregateProvider is an autogenerated mock type for the AggregateProvider type
type MockAggregateProvider[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	mock.Mock
}

type MockAggregateProvider_Expecter[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	mock *mock.Mock
}

func (_m *MockAggregateProvider[T, S, P, K]) EXPECT() *MockAggregateProvider_Expecter[T, S, P, K] {
	return &MockAggregateProvider_Expecter[T, S, P, K]{mock: &_m.Mock}
}

// ApplyChange provides a mock function with given fields: e
func (_m *MockAggregateProvider[T, S, P, K]) ApplyChange(e events.Event[T]) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for ApplyChange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(events.Event[T]) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAggregateProvider_ApplyChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyChange'
type MockAggregateProvider_ApplyChange_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// ApplyChange is a helper method to define mock.On call
//   - e events.Event[T]
func (_e *MockAggregateProvider_Expecter[T, S, P, K]) ApplyChange(e interface{}) *MockAggregateProvider_ApplyChange_Call[T, S, P, K] {
	return &MockAggregateProvider_ApplyChange_Call[T, S, P, K]{Call: _e.mock.On("ApplyChange", e)}
}

func (_c *MockAggregateProvider_ApplyChange_Call[T, S, P, K]) Run(run func(e events.Event[T])) *MockAggregateProvider_ApplyChange_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(events.Event[T]))
	})
	return _c
}

func (_c *MockAggregateProvider_ApplyChange_Call[T, S, P, K]) Return(_a0 error) *MockAggregateProvider_ApplyChange_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_ApplyChange_Call[T, S, P, K]) RunAndReturn(run func(events.Event[T]) error) *MockAggregateProvider_ApplyChange_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// ApplyChanges provides a mock function with given fields: _a0
func (_m *MockAggregateProvider[T, S, P, K]) ApplyChanges(_a0 []events.Event[T]) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ApplyChanges")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]events.Event[T]) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAggregateProvider_ApplyChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyChanges'
type MockAggregateProvider_ApplyChanges_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// ApplyChanges is a helper method to define mock.On call
//   - _a0 []events.Event[T]
func (_e *MockAggregateProvider_Expecter[T, S, P, K]) ApplyChanges(_a0 interface{}) *MockAggregateProvider_ApplyChanges_Call[T, S, P, K] {
	return &MockAggregateProvider_ApplyChanges_Call[T, S, P, K]{Call: _e.mock.On("ApplyChanges", _a0)}
}

func (_c *MockAggregateProvider_ApplyChanges_Call[T, S, P, K]) Run(run func(_a0 []events.Event[T])) *MockAggregateProvider_ApplyChanges_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]events.Event[T]))
	})
	return _c
}

func (_c *MockAggregateProvider_ApplyChanges_Call[T, S, P, K]) Return(_a0 error) *MockAggregateProvider_ApplyChanges_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_ApplyChanges_Call[T, S, P, K]) RunAndReturn(run func([]events.Event[T]) error) *MockAggregateProvider_ApplyChanges_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// BaseVersion provides a mock function with no fields
func (_m *MockAggregateProvider[T, S, P, K]) BaseVersion() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BaseVersion")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockAggregateProvider_BaseVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseVersion'
type MockAggregateProvider_BaseVersion_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// BaseVersion is a helper method to define mock.On call
func (_e *MockAggregateProvider_Expecter[T, S, P, K]) BaseVersion() *MockAggregateProvider_BaseVersion_Call[T, S, P, K] {
	return &MockAggregateProvider_BaseVersion_Call[T, S, P, K]{Call: _e.mock.On("BaseVersion")}
}

func (_c *MockAggregateProvider_BaseVersion_Call[T, S, P, K]) Run(run func()) *MockAggregateProvider_BaseVersion_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregateProvider_BaseVersion_Call[T, S, P, K]) Return(_a0 int) *MockAggregateProvider_BaseVersion_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_BaseVersion_Call[T, S, P, K]) RunAndReturn(run func() int) *MockAggregateProvider_BaseVersion_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// Build provides a mock function with given fields: _a0
func (_m *MockAggregateProvider[T, S, P, K]) Build(_a0 []events.Event[T]) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]events.Event[T]) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAggregateProvider_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockAggregateProvider_Build_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - _a0 []events.Event[T]
func (_e *MockAggregateProvider_Expecter[T, S, P, K]) Build(_a0 interface{}) *MockAggregateProvider_Build_Call[T, S, P, K] {
	return &MockAggregateProvider_Build_Call[T, S, P, K]{Call: _e.mock.On("Build", _a0)}
}

func (_c *MockAggregateProvider_Build_Call[T, S, P, K]) Run(run func(_a0 []events.Event[T])) *MockAggregateProvider_Build_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]events.Event[T]))
	})
	return _c
}

func (_c *MockAggregateProvider_Build_Call[T, S, P, K]) Return(_a0 error) *MockAggregateProvider_Build_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_Build_Call[T, S, P, K]) RunAndReturn(run func([]events.Event[T]) error) *MockAggregateProvider_Build_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// BuildFromSnapshot provides a mock function with given fields: version, payload
func (_m *MockAggregateProvider[T, S, P, K]) BuildFromSnapshot(version int, payload S) error {
	ret := _m.Called(version, payload)

	if len(ret) == 0 {
		panic("no return value specified for BuildFromSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, S) error); ok {
		r0 = rf(version, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAggregateProvider_BuildFromSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildFromSnapshot'
type MockAggregateProvider_BuildFromSnapshot_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// BuildFromSnapshot is a helper method to define mock.On call
//   - version int
//   - payload S
func (_e *MockAggregateProvider_Expecter[T, S, P, K]) BuildFromSnapshot(version interface{}, payload interface{}) *MockAggregateProvider_BuildFromSnapshot_Call[T, S, P, K] {
	return &MockAggregateProvider_BuildFromSnapshot_Call[T, S, P, K]{Call: _e.mock.On("BuildFromSnapshot", version, payload)}
}

func (_c *MockAggregateProvider_BuildFromSnapshot_Call[T, S, P, K]) Run(run func(version int, payload S)) *MockAggregateProvider_BuildFromSnapshot_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(S))
	})
	return _c
}

func (_c *MockAggregateProvider_BuildFromSnapshot_Call[T, S, P, K]) Return(_a0 error) *MockAggregateProvider_BuildFromSnapshot_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_BuildFromSnapshot_Call[T, S, P, K]) RunAndReturn(run func(int, S) error) *MockAggregateProvider_BuildFromSnapshot_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// Cap provides a mock function with no fields
func (_m *MockAggregateProvider[T, S, P, K]) Cap() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cap")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockAggregateProvider_Cap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cap'
type MockAggregateProvider_Cap_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// Cap is a helper method to define mock.On call
func (_e *MockAggregateProvider_Expecter[T, S, P, K]) Cap() *MockAggregateProvider_Cap_Call[T, S, P, K] {
	return &MockAggregateProvider_Cap_Call[T, S, P, K]{Call: _e.mock.On("Cap")}
}

func (_c *MockAggregateProvider_Cap_Call[T, S, P, K]) Run(run func()) *MockAggregateProvider_Cap_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregateProvider_Cap_Call[T, S, P, K]) Return(_a0 int) *MockAggregateProvider_Cap_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_Cap_Call[T, S, P, K]) RunAndReturn(run func() int) *MockAggregateProvider_Cap_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// Changes provides a mock function with no fields
func (_m *MockAggregateProvider[T, S, P, K]) Changes() []events.Event[T] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Changes")
	}

	var r0 []events.Event[T]
	if rf, ok := ret.Get(0).(func() []events.Event[T]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Event[T])
		}
	}

	return r0
}

// MockAggregateProvider_Changes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Changes'
type MockAggregateProvider_Changes_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// Changes is a helper method to define mock.On call
func (_e *MockAggregateProvider_Expecter[T, S, P, K]) Changes() *MockAggregateProvider_Changes_Call[T, S, P, K] {
	return &MockAggregateProvider_Changes_Call[T, S, P, K]{Call: _e.mock.On("Changes")}
}

func (_c *MockAggregateProvider_Changes_Call[T, S, P, K]) Run(run func()) *MockAggregateProvider_Changes_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregateProvider_Changes_Call[T, S, P, K]) Return(_a0 []events.Event[T]) *MockAggregateProvider_Changes_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_Changes_Call[T, S, P, K]) RunAndReturn(run func() []events.Event[T]) *MockAggregateProvider_Changes_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockAggregateProvider[T, S, P, K]) ID() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// MockAggregateProvider_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockAggregateProvider_ID_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockAggregateProvider_Expecter[T, S, P, K]) ID() *MockAggregateProvider_ID_Call[T, S, P, K] {
	return &MockAggregateProvider_ID_Call[T, S, P, K]{Call: _e.mock.On("ID")}
}

func (_c *MockAggregateProvider_ID_Call[T, S, P, K]) Run(run func()) *MockAggregateProvider_ID_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregateProvider_ID_Call[T, S, P, K]) Return(_a0 uuid.UUID) *MockAggregateProvider_ID_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_ID_Call[T, S, P, K]) RunAndReturn(run func() uuid.UUID) *MockAggregateProvider_ID_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// IntegrationEvent provides a mock function with given fields: evType
func (_m *MockAggregateProvider[T, S, P, K]) IntegrationEvent(evType int) events.IntegrationEvent[K] {
	ret := _m.Called(evType)

	if len(ret) == 0 {
		panic("no return value specified for IntegrationEvent")
	}

	var r0 events.IntegrationEvent[K]
	if rf, ok := ret.Get(0).(func(int) events.IntegrationEvent[K]); ok {
		r0 = rf(evType)
	} else {
		r0 = ret.Get(0).(events.IntegrationEvent[K])
	}

	return r0
}

// MockAggregateProvider_IntegrationEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IntegrationEvent'
type MockAggregateProvider_IntegrationEvent_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// IntegrationEvent is a helper method to define mock.On call
//   - evType int
func (_e *MockAggregateProvider_Expecter[T, S, P, K]) IntegrationEvent(evType interface{}) *MockAggregateProvider_IntegrationEvent_Call[T, S, P, K] {
	return &MockAggregateProvider_IntegrationEvent_Call[T, S, P, K]{Call: _e.mock.On("IntegrationEvent", evType)}
}

func (_c *MockAggregateProvider_IntegrationEvent_Call[T, S, P, K]) Run(run func(evType int)) *MockAggregateProvider_IntegrationEvent_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockAggregateProvider_IntegrationEvent_Call[T, S, P, K]) Return(_a0 events.IntegrationEvent[K]) *MockAggregateProvider_IntegrationEvent_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_IntegrationEvent_Call[T, S, P, K]) RunAndReturn(run func(int) events.IntegrationEvent[K]) *MockAggregateProvider_IntegrationEvent_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// Projection provides a mock function with no fields
func (_m *MockAggregateProvider[T, S, P, K]) Projection() P {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Projection")
	}

	var r0 P
	if rf, ok := ret.Get(0).(func() P); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(P)
		}
	}

	return r0
}

// MockAggregateProvider_Projection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Projection'
type MockAggregateProvider_Projection_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// Projection is a helper method to define mock.On call
func (_e *MockAggregateProvider_Expecter[T, S, P, K]) Projection() *MockAggregateProvider_Projection_Call[T, S, P, K] {
	return &MockAggregateProvider_Projection_Call[T, S, P, K]{Call: _e.mock.On("Projection")}
}

func (_c *MockAggregateProvider_Projection_Call[T, S, P, K]) Run(run func()) *MockAggregateProvider_Projection_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregateProvider_Projection_Call[T, S, P, K]) Return(_a0 P) *MockAggregateProvider_Projection_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_Projection_Call[T, S, P, K]) RunAndReturn(run func() P) *MockAggregateProvider_Projection_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// Snapshot provides a mock function with no fields
func (_m *MockAggregateProvider[T, S, P, K]) Snapshot() S {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Snapshot")
	}

	var r0 S
	if rf, ok := ret.Get(0).(func() S); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(S)
		}
	}

	return r0
}

// MockAggregateProvider_Snapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Snapshot'
type MockAggregateProvider_Snapshot_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// Snapshot is a helper method to define mock.On call
func (_e *MockAggregateProvider_Expecter[T, S, P, K]) Snapshot() *MockAggregateProvider_Snapshot_Call[T, S, P, K] {
	return &MockAggregateProvider_Snapshot_Call[T, S, P, K]{Call: _e.mock.On("Snapshot")}
}

func (_c *MockAggregateProvider_Snapshot_Call[T, S, P, K]) Run(run func()) *MockAggregateProvider_Snapshot_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregateProvider_Snapshot_Call[T, S, P, K]) Return(_a0 S) *MockAggregateProvider_Snapshot_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_Snapshot_Call[T, S, P, K]) RunAndReturn(run func() S) *MockAggregateProvider_Snapshot_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with no fields
func (_m *MockAggregateProvider[T, S, P, K]) Version() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockAggregateProvider_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockAggregateProvider_Version_Call[T interface{}, S interface{}, P interface{}, K interface{}] struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockAggregateProvider_Expecter[T, S, P, K]) Version() *MockAggregateProvider_Version_Call[T, S, P, K] {
	return &MockAggregateProvider_Version_Call[T, S, P, K]{Call: _e.mock.On("Version")}
}

func (_c *MockAggregateProvider_Version_Call[T, S, P, K]) Run(run func()) *MockAggregateProvider_Version_Call[T, S, P, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregateProvider_Version_Call[T, S, P, K]) Return(_a0 int) *MockAggregateProvider_Version_Call[T, S, P, K] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_Version_Call[T, S, P, K]) RunAndReturn(run func() int) *MockAggregateProvider_Version_Call[T, S, P, K] {
	_c.Call.Return(run)
	return _c
}

// NewMockAggregateProvider creates a new instance of MockAggregateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAggregateProvider[T interface{}, S interface{}, P interface{}, K interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAggregateProvider[T, S, P, K] {
	mock := &MockAggregateProvider[T, S, P, K]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
