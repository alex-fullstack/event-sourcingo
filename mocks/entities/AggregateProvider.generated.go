// Code generated by mockery v2.52.3. DO NOT EDIT.

package entities

import (
	events "github.com/alex-fullstack/event-sourcingo/domain/events"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockAggregateProvider is an autogenerated mock type for the AggregateProvider type
type MockAggregateProvider struct {
	mock.Mock
}

type MockAggregateProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAggregateProvider) EXPECT() *MockAggregateProvider_Expecter {
	return &MockAggregateProvider_Expecter{mock: &_m.Mock}
}

// ApplyChanges provides a mock function with given fields: _a0
func (_m *MockAggregateProvider) ApplyChanges(_a0 []events.Event) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ApplyChanges")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]events.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAggregateProvider_ApplyChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyChanges'
type MockAggregateProvider_ApplyChanges_Call struct {
	*mock.Call
}

// ApplyChanges is a helper method to define mock.On call
//   - _a0 []events.Event
func (_e *MockAggregateProvider_Expecter) ApplyChanges(_a0 interface{}) *MockAggregateProvider_ApplyChanges_Call {
	return &MockAggregateProvider_ApplyChanges_Call{Call: _e.mock.On("ApplyChanges", _a0)}
}

func (_c *MockAggregateProvider_ApplyChanges_Call) Run(run func(_a0 []events.Event)) *MockAggregateProvider_ApplyChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]events.Event))
	})
	return _c
}

func (_c *MockAggregateProvider_ApplyChanges_Call) Return(_a0 error) *MockAggregateProvider_ApplyChanges_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_ApplyChanges_Call) RunAndReturn(run func([]events.Event) error) *MockAggregateProvider_ApplyChanges_Call {
	_c.Call.Return(run)
	return _c
}

// BaseVersion provides a mock function with no fields
func (_m *MockAggregateProvider) BaseVersion() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BaseVersion")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockAggregateProvider_BaseVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseVersion'
type MockAggregateProvider_BaseVersion_Call struct {
	*mock.Call
}

// BaseVersion is a helper method to define mock.On call
func (_e *MockAggregateProvider_Expecter) BaseVersion() *MockAggregateProvider_BaseVersion_Call {
	return &MockAggregateProvider_BaseVersion_Call{Call: _e.mock.On("BaseVersion")}
}

func (_c *MockAggregateProvider_BaseVersion_Call) Run(run func()) *MockAggregateProvider_BaseVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregateProvider_BaseVersion_Call) Return(_a0 int) *MockAggregateProvider_BaseVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_BaseVersion_Call) RunAndReturn(run func() int) *MockAggregateProvider_BaseVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Build provides a mock function with given fields: _a0
func (_m *MockAggregateProvider) Build(_a0 []events.Event) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]events.Event) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAggregateProvider_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockAggregateProvider_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - _a0 []events.Event
func (_e *MockAggregateProvider_Expecter) Build(_a0 interface{}) *MockAggregateProvider_Build_Call {
	return &MockAggregateProvider_Build_Call{Call: _e.mock.On("Build", _a0)}
}

func (_c *MockAggregateProvider_Build_Call) Run(run func(_a0 []events.Event)) *MockAggregateProvider_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]events.Event))
	})
	return _c
}

func (_c *MockAggregateProvider_Build_Call) Return(_a0 error) *MockAggregateProvider_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_Build_Call) RunAndReturn(run func([]events.Event) error) *MockAggregateProvider_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Changes provides a mock function with no fields
func (_m *MockAggregateProvider) Changes() []events.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Changes")
	}

	var r0 []events.Event
	if rf, ok := ret.Get(0).(func() []events.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Event)
		}
	}

	return r0
}

// MockAggregateProvider_Changes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Changes'
type MockAggregateProvider_Changes_Call struct {
	*mock.Call
}

// Changes is a helper method to define mock.On call
func (_e *MockAggregateProvider_Expecter) Changes() *MockAggregateProvider_Changes_Call {
	return &MockAggregateProvider_Changes_Call{Call: _e.mock.On("Changes")}
}

func (_c *MockAggregateProvider_Changes_Call) Run(run func()) *MockAggregateProvider_Changes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregateProvider_Changes_Call) Return(_a0 []events.Event) *MockAggregateProvider_Changes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_Changes_Call) RunAndReturn(run func() []events.Event) *MockAggregateProvider_Changes_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *MockAggregateProvider) ID() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// MockAggregateProvider_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockAggregateProvider_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockAggregateProvider_Expecter) ID() *MockAggregateProvider_ID_Call {
	return &MockAggregateProvider_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockAggregateProvider_ID_Call) Run(run func()) *MockAggregateProvider_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregateProvider_ID_Call) Return(_a0 uuid.UUID) *MockAggregateProvider_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_ID_Call) RunAndReturn(run func() uuid.UUID) *MockAggregateProvider_ID_Call {
	_c.Call.Return(run)
	return _c
}

// IntegrationEvent provides a mock function with given fields: evType
func (_m *MockAggregateProvider) IntegrationEvent(evType int) (events.IntegrationEvent, error) {
	ret := _m.Called(evType)

	if len(ret) == 0 {
		panic("no return value specified for IntegrationEvent")
	}

	var r0 events.IntegrationEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (events.IntegrationEvent, error)); ok {
		return rf(evType)
	}
	if rf, ok := ret.Get(0).(func(int) events.IntegrationEvent); ok {
		r0 = rf(evType)
	} else {
		r0 = ret.Get(0).(events.IntegrationEvent)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(evType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAggregateProvider_IntegrationEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IntegrationEvent'
type MockAggregateProvider_IntegrationEvent_Call struct {
	*mock.Call
}

// IntegrationEvent is a helper method to define mock.On call
//   - evType int
func (_e *MockAggregateProvider_Expecter) IntegrationEvent(evType interface{}) *MockAggregateProvider_IntegrationEvent_Call {
	return &MockAggregateProvider_IntegrationEvent_Call{Call: _e.mock.On("IntegrationEvent", evType)}
}

func (_c *MockAggregateProvider_IntegrationEvent_Call) Run(run func(evType int)) *MockAggregateProvider_IntegrationEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockAggregateProvider_IntegrationEvent_Call) Return(_a0 events.IntegrationEvent, _a1 error) *MockAggregateProvider_IntegrationEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAggregateProvider_IntegrationEvent_Call) RunAndReturn(run func(int) (events.IntegrationEvent, error)) *MockAggregateProvider_IntegrationEvent_Call {
	_c.Call.Return(run)
	return _c
}

// Projection provides a mock function with no fields
func (_m *MockAggregateProvider) Projection() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Projection")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockAggregateProvider_Projection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Projection'
type MockAggregateProvider_Projection_Call struct {
	*mock.Call
}

// Projection is a helper method to define mock.On call
func (_e *MockAggregateProvider_Expecter) Projection() *MockAggregateProvider_Projection_Call {
	return &MockAggregateProvider_Projection_Call{Call: _e.mock.On("Projection")}
}

func (_c *MockAggregateProvider_Projection_Call) Run(run func()) *MockAggregateProvider_Projection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregateProvider_Projection_Call) Return(_a0 interface{}) *MockAggregateProvider_Projection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_Projection_Call) RunAndReturn(run func() interface{}) *MockAggregateProvider_Projection_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with no fields
func (_m *MockAggregateProvider) Version() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockAggregateProvider_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockAggregateProvider_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *MockAggregateProvider_Expecter) Version() *MockAggregateProvider_Version_Call {
	return &MockAggregateProvider_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *MockAggregateProvider_Version_Call) Run(run func()) *MockAggregateProvider_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAggregateProvider_Version_Call) Return(_a0 int) *MockAggregateProvider_Version_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregateProvider_Version_Call) RunAndReturn(run func() int) *MockAggregateProvider_Version_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAggregateProvider creates a new instance of MockAggregateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAggregateProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAggregateProvider {
	mock := &MockAggregateProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
