// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolicyBackendClient is the client API for PolicyBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyBackendClient interface {
	CheckRole(ctx context.Context, in *RoleCheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckPermission(ctx context.Context, in *PermissionCheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type policyBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyBackendClient(cc grpc.ClientConnInterface) PolicyBackendClient {
	return &policyBackendClient{cc}
}

func (c *policyBackendClient) CheckRole(ctx context.Context, in *RoleCheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/backend.PolicyBackend/CheckRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyBackendClient) CheckPermission(ctx context.Context, in *PermissionCheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/backend.PolicyBackend/CheckPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyBackendServer is the server API for PolicyBackend service.
// All implementations must embed UnimplementedPolicyBackendServer
// for forward compatibility
type PolicyBackendServer interface {
	CheckRole(context.Context, *RoleCheckRequest) (*emptypb.Empty, error)
	CheckPermission(context.Context, *PermissionCheckRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPolicyBackendServer()
}

// UnimplementedPolicyBackendServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyBackendServer struct {
}

func (UnimplementedPolicyBackendServer) CheckRole(context.Context, *RoleCheckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRole not implemented")
}
func (UnimplementedPolicyBackendServer) CheckPermission(context.Context, *PermissionCheckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedPolicyBackendServer) mustEmbedUnimplementedPolicyBackendServer() {}

// UnsafePolicyBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyBackendServer will
// result in compilation errors.
type UnsafePolicyBackendServer interface {
	mustEmbedUnimplementedPolicyBackendServer()
}

func RegisterPolicyBackendServer(s grpc.ServiceRegistrar, srv PolicyBackendServer) {
	s.RegisterService(&PolicyBackend_ServiceDesc, srv)
}

func _PolicyBackend_CheckRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyBackendServer).CheckRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.PolicyBackend/CheckRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyBackendServer).CheckRole(ctx, req.(*RoleCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyBackend_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyBackendServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.PolicyBackend/CheckPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyBackendServer).CheckPermission(ctx, req.(*PermissionCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyBackend_ServiceDesc is the grpc.ServiceDesc for PolicyBackend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyBackend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.PolicyBackend",
	HandlerType: (*PolicyBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckRole",
			Handler:    _PolicyBackend_CheckRole_Handler,
		},
		{
			MethodName: "CheckPermission",
			Handler:    _PolicyBackend_CheckPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/infrastructure/grpc/contract.proto",
}
