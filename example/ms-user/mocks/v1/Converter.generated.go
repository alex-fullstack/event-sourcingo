// Code generated by mockery v2.52.3. DO NOT EDIT.

package v1

import (
	http "net/http"
	dto "user/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockConverter is an autogenerated mock type for the Converter type
type MockConverter struct {
	mock.Mock
}

type MockConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConverter) EXPECT() *MockConverter_Expecter {
	return &MockConverter_Expecter{mock: &_m.Mock}
}

// ConvertConfirm provides a mock function with given fields: req
func (_m *MockConverter) ConvertConfirm(req *http.Request) (dto.ConfirmInput, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ConvertConfirm")
	}

	var r0 dto.ConfirmInput
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (dto.ConfirmInput, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) dto.ConfirmInput); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(dto.ConfirmInput)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConverter_ConvertConfirm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertConfirm'
type MockConverter_ConvertConfirm_Call struct {
	*mock.Call
}

// ConvertConfirm is a helper method to define mock.On call
//   - req *http.Request
func (_e *MockConverter_Expecter) ConvertConfirm(req interface{}) *MockConverter_ConvertConfirm_Call {
	return &MockConverter_ConvertConfirm_Call{Call: _e.mock.On("ConvertConfirm", req)}
}

func (_c *MockConverter_ConvertConfirm_Call) Run(run func(req *http.Request)) *MockConverter_ConvertConfirm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockConverter_ConvertConfirm_Call) Return(_a0 dto.ConfirmInput, _a1 error) *MockConverter_ConvertConfirm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConverter_ConvertConfirm_Call) RunAndReturn(run func(*http.Request) (dto.ConfirmInput, error)) *MockConverter_ConvertConfirm_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertLogin provides a mock function with given fields: req
func (_m *MockConverter) ConvertLogin(req *http.Request) (dto.UserLogin, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ConvertLogin")
	}

	var r0 dto.UserLogin
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (dto.UserLogin, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) dto.UserLogin); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(dto.UserLogin)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConverter_ConvertLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertLogin'
type MockConverter_ConvertLogin_Call struct {
	*mock.Call
}

// ConvertLogin is a helper method to define mock.On call
//   - req *http.Request
func (_e *MockConverter_Expecter) ConvertLogin(req interface{}) *MockConverter_ConvertLogin_Call {
	return &MockConverter_ConvertLogin_Call{Call: _e.mock.On("ConvertLogin", req)}
}

func (_c *MockConverter_ConvertLogin_Call) Run(run func(req *http.Request)) *MockConverter_ConvertLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockConverter_ConvertLogin_Call) Return(_a0 dto.UserLogin, _a1 error) *MockConverter_ConvertLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConverter_ConvertLogin_Call) RunAndReturn(run func(*http.Request) (dto.UserLogin, error)) *MockConverter_ConvertLogin_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertRequestConfirm provides a mock function with given fields: req
func (_m *MockConverter) ConvertRequestConfirm(req *http.Request) (dto.UserRequestConfirmation, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ConvertRequestConfirm")
	}

	var r0 dto.UserRequestConfirmation
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (dto.UserRequestConfirmation, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) dto.UserRequestConfirmation); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(dto.UserRequestConfirmation)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConverter_ConvertRequestConfirm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertRequestConfirm'
type MockConverter_ConvertRequestConfirm_Call struct {
	*mock.Call
}

// ConvertRequestConfirm is a helper method to define mock.On call
//   - req *http.Request
func (_e *MockConverter_Expecter) ConvertRequestConfirm(req interface{}) *MockConverter_ConvertRequestConfirm_Call {
	return &MockConverter_ConvertRequestConfirm_Call{Call: _e.mock.On("ConvertRequestConfirm", req)}
}

func (_c *MockConverter_ConvertRequestConfirm_Call) Run(run func(req *http.Request)) *MockConverter_ConvertRequestConfirm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockConverter_ConvertRequestConfirm_Call) Return(_a0 dto.UserRequestConfirmation, _a1 error) *MockConverter_ConvertRequestConfirm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConverter_ConvertRequestConfirm_Call) RunAndReturn(run func(*http.Request) (dto.UserRequestConfirmation, error)) *MockConverter_ConvertRequestConfirm_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertSign provides a mock function with given fields: req
func (_m *MockConverter) ConvertSign(req *http.Request) (dto.UserSign, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ConvertSign")
	}

	var r0 dto.UserSign
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (dto.UserSign, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) dto.UserSign); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(dto.UserSign)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConverter_ConvertSign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertSign'
type MockConverter_ConvertSign_Call struct {
	*mock.Call
}

// ConvertSign is a helper method to define mock.On call
//   - req *http.Request
func (_e *MockConverter_Expecter) ConvertSign(req interface{}) *MockConverter_ConvertSign_Call {
	return &MockConverter_ConvertSign_Call{Call: _e.mock.On("ConvertSign", req)}
}

func (_c *MockConverter_ConvertSign_Call) Run(run func(req *http.Request)) *MockConverter_ConvertSign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockConverter_ConvertSign_Call) Return(_a0 dto.UserSign, _a1 error) *MockConverter_ConvertSign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConverter_ConvertSign_Call) RunAndReturn(run func(*http.Request) (dto.UserSign, error)) *MockConverter_ConvertSign_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAuthResult provides a mock function with given fields: w, result
func (_m *MockConverter) WriteAuthResult(w http.ResponseWriter, result dto.AuthResult) {
	_m.Called(w, result)
}

// MockConverter_WriteAuthResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAuthResult'
type MockConverter_WriteAuthResult_Call struct {
	*mock.Call
}

// WriteAuthResult is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - result dto.AuthResult
func (_e *MockConverter_Expecter) WriteAuthResult(w interface{}, result interface{}) *MockConverter_WriteAuthResult_Call {
	return &MockConverter_WriteAuthResult_Call{Call: _e.mock.On("WriteAuthResult", w, result)}
}

func (_c *MockConverter_WriteAuthResult_Call) Run(run func(w http.ResponseWriter, result dto.AuthResult)) *MockConverter_WriteAuthResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(dto.AuthResult))
	})
	return _c
}

func (_c *MockConverter_WriteAuthResult_Call) Return() *MockConverter_WriteAuthResult_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConverter_WriteAuthResult_Call) RunAndReturn(run func(http.ResponseWriter, dto.AuthResult)) *MockConverter_WriteAuthResult_Call {
	_c.Run(run)
	return _c
}

// WriteError provides a mock function with given fields: w, err, status
func (_m *MockConverter) WriteError(w http.ResponseWriter, err error, status int) {
	_m.Called(w, err, status)
}

// MockConverter_WriteError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteError'
type MockConverter_WriteError_Call struct {
	*mock.Call
}

// WriteError is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - err error
//   - status int
func (_e *MockConverter_Expecter) WriteError(w interface{}, err interface{}, status interface{}) *MockConverter_WriteError_Call {
	return &MockConverter_WriteError_Call{Call: _e.mock.On("WriteError", w, err, status)}
}

func (_c *MockConverter_WriteError_Call) Run(run func(w http.ResponseWriter, err error, status int)) *MockConverter_WriteError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(error), args[2].(int))
	})
	return _c
}

func (_c *MockConverter_WriteError_Call) Return() *MockConverter_WriteError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConverter_WriteError_Call) RunAndReturn(run func(http.ResponseWriter, error, int)) *MockConverter_WriteError_Call {
	_c.Run(run)
	return _c
}

// WriteNoContentResult provides a mock function with given fields: w
func (_m *MockConverter) WriteNoContentResult(w http.ResponseWriter) {
	_m.Called(w)
}

// MockConverter_WriteNoContentResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteNoContentResult'
type MockConverter_WriteNoContentResult_Call struct {
	*mock.Call
}

// WriteNoContentResult is a helper method to define mock.On call
//   - w http.ResponseWriter
func (_e *MockConverter_Expecter) WriteNoContentResult(w interface{}) *MockConverter_WriteNoContentResult_Call {
	return &MockConverter_WriteNoContentResult_Call{Call: _e.mock.On("WriteNoContentResult", w)}
}

func (_c *MockConverter_WriteNoContentResult_Call) Run(run func(w http.ResponseWriter)) *MockConverter_WriteNoContentResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockConverter_WriteNoContentResult_Call) Return() *MockConverter_WriteNoContentResult_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConverter_WriteNoContentResult_Call) RunAndReturn(run func(http.ResponseWriter)) *MockConverter_WriteNoContentResult_Call {
	_c.Run(run)
	return _c
}

// NewMockConverter creates a new instance of MockConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConverter {
	mock := &MockConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
