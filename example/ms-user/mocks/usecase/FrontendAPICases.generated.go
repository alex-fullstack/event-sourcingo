// Code generated by mockery v2.52.3. DO NOT EDIT.

package usecase

import (
	context "context"
	dto "user/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockFrontendAPICases is an autogenerated mock type for the FrontendAPICases type
type MockFrontendAPICases struct {
	mock.Mock
}

type MockFrontendAPICases_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFrontendAPICases) EXPECT() *MockFrontendAPICases_Expecter {
	return &MockFrontendAPICases_Expecter{mock: &_m.Mock}
}

// Confirm provides a mock function with given fields: ctx, data
func (_m *MockFrontendAPICases) Confirm(ctx context.Context, data dto.ConfirmInput) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Confirm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ConfirmInput) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFrontendAPICases_Confirm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Confirm'
type MockFrontendAPICases_Confirm_Call struct {
	*mock.Call
}

// Confirm is a helper method to define mock.On call
//   - ctx context.Context
//   - data dto.ConfirmInput
func (_e *MockFrontendAPICases_Expecter) Confirm(ctx interface{}, data interface{}) *MockFrontendAPICases_Confirm_Call {
	return &MockFrontendAPICases_Confirm_Call{Call: _e.mock.On("Confirm", ctx, data)}
}

func (_c *MockFrontendAPICases_Confirm_Call) Run(run func(ctx context.Context, data dto.ConfirmInput)) *MockFrontendAPICases_Confirm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ConfirmInput))
	})
	return _c
}

func (_c *MockFrontendAPICases_Confirm_Call) Return(_a0 error) *MockFrontendAPICases_Confirm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFrontendAPICases_Confirm_Call) RunAndReturn(run func(context.Context, dto.ConfirmInput) error) *MockFrontendAPICases_Confirm_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, data
func (_m *MockFrontendAPICases) Login(ctx context.Context, data dto.UserLogin) (dto.AuthResult, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 dto.AuthResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserLogin) (dto.AuthResult, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserLogin) dto.AuthResult); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(dto.AuthResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UserLogin) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFrontendAPICases_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockFrontendAPICases_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - data dto.UserLogin
func (_e *MockFrontendAPICases_Expecter) Login(ctx interface{}, data interface{}) *MockFrontendAPICases_Login_Call {
	return &MockFrontendAPICases_Login_Call{Call: _e.mock.On("Login", ctx, data)}
}

func (_c *MockFrontendAPICases_Login_Call) Run(run func(ctx context.Context, data dto.UserLogin)) *MockFrontendAPICases_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UserLogin))
	})
	return _c
}

func (_c *MockFrontendAPICases_Login_Call) Return(_a0 dto.AuthResult, _a1 error) *MockFrontendAPICases_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFrontendAPICases_Login_Call) RunAndReturn(run func(context.Context, dto.UserLogin) (dto.AuthResult, error)) *MockFrontendAPICases_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RequestConfirm provides a mock function with given fields: ctx, data
func (_m *MockFrontendAPICases) RequestConfirm(ctx context.Context, data dto.UserRequestConfirmation) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for RequestConfirm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserRequestConfirmation) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFrontendAPICases_RequestConfirm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestConfirm'
type MockFrontendAPICases_RequestConfirm_Call struct {
	*mock.Call
}

// RequestConfirm is a helper method to define mock.On call
//   - ctx context.Context
//   - data dto.UserRequestConfirmation
func (_e *MockFrontendAPICases_Expecter) RequestConfirm(ctx interface{}, data interface{}) *MockFrontendAPICases_RequestConfirm_Call {
	return &MockFrontendAPICases_RequestConfirm_Call{Call: _e.mock.On("RequestConfirm", ctx, data)}
}

func (_c *MockFrontendAPICases_RequestConfirm_Call) Run(run func(ctx context.Context, data dto.UserRequestConfirmation)) *MockFrontendAPICases_RequestConfirm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UserRequestConfirmation))
	})
	return _c
}

func (_c *MockFrontendAPICases_RequestConfirm_Call) Return(_a0 error) *MockFrontendAPICases_RequestConfirm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFrontendAPICases_RequestConfirm_Call) RunAndReturn(run func(context.Context, dto.UserRequestConfirmation) error) *MockFrontendAPICases_RequestConfirm_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: ctx, data
func (_m *MockFrontendAPICases) Sign(ctx context.Context, data dto.UserSign) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserSign) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFrontendAPICases_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MockFrontendAPICases_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - ctx context.Context
//   - data dto.UserSign
func (_e *MockFrontendAPICases_Expecter) Sign(ctx interface{}, data interface{}) *MockFrontendAPICases_Sign_Call {
	return &MockFrontendAPICases_Sign_Call{Call: _e.mock.On("Sign", ctx, data)}
}

func (_c *MockFrontendAPICases_Sign_Call) Run(run func(ctx context.Context, data dto.UserSign)) *MockFrontendAPICases_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UserSign))
	})
	return _c
}

func (_c *MockFrontendAPICases_Sign_Call) Return(_a0 error) *MockFrontendAPICases_Sign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFrontendAPICases_Sign_Call) RunAndReturn(run func(context.Context, dto.UserSign) error) *MockFrontendAPICases_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFrontendAPICases creates a new instance of MockFrontendAPICases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFrontendAPICases(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFrontendAPICases {
	mock := &MockFrontendAPICases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
