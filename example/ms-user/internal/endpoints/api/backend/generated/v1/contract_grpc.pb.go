// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserBackendClient is the client API for UserBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserBackendClient interface {
	GetUserIDByEmail(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UserIDResponse, error)
}

type userBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewUserBackendClient(cc grpc.ClientConnInterface) UserBackendClient {
	return &userBackendClient{cc}
}

func (c *userBackendClient) GetUserIDByEmail(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UserIDResponse, error) {
	out := new(UserIDResponse)
	err := c.cc.Invoke(ctx, "/backend.UserBackend/GetUserIDByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserBackendServer is the server API for UserBackend service.
// All implementations must embed UnimplementedUserBackendServer
// for forward compatibility
type UserBackendServer interface {
	GetUserIDByEmail(context.Context, *UserIDRequest) (*UserIDResponse, error)
	mustEmbedUnimplementedUserBackendServer()
}

// UnimplementedUserBackendServer must be embedded to have forward compatible implementations.
type UnimplementedUserBackendServer struct {
}

func (UnimplementedUserBackendServer) GetUserIDByEmail(context.Context, *UserIDRequest) (*UserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIDByEmail not implemented")
}
func (UnimplementedUserBackendServer) mustEmbedUnimplementedUserBackendServer() {}

// UnsafeUserBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserBackendServer will
// result in compilation errors.
type UnsafeUserBackendServer interface {
	mustEmbedUnimplementedUserBackendServer()
}

func RegisterUserBackendServer(s grpc.ServiceRegistrar, srv UserBackendServer) {
	s.RegisterService(&UserBackend_ServiceDesc, srv)
}

func _UserBackend_GetUserIDByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBackendServer).GetUserIDByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.UserBackend/GetUserIDByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBackendServer).GetUserIDByEmail(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserBackend_ServiceDesc is the grpc.ServiceDesc for UserBackend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserBackend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.UserBackend",
	HandlerType: (*UserBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserIDByEmail",
			Handler:    _UserBackend_GetUserIDByEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/endpoints/api/backend/contract.proto",
}
